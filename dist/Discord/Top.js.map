{"version":3,"sources":["../../src/Discord/Top.js"],"names":["Top","name","syntax","description","message","params","n","suffix","parseInt","__reddit","getSubreddit","subreddit","getHot","then","response","sendBatchedMessage","__dot","top","slice","contents","msg","batches","match","batch","channel","sendMessage","catch","error"],"mappings":";;;;;;;;;;;;AACA;;;;AACA;;;;;;;;;;IAEqBA,G;;;;;;;;;;;;;AAEjB;;;;+BAIO;AACH,iBAAKC,IAAL,GAAY,KAAZ;AACA,iBAAKC,MAAL,GAAc,wBAAd;AACA,iBAAKC,WAAL,GAAmB,iDAAnB;AACA,mBAAO,IAAP;AACH;;AAED;;;;;;;;gCAKSC,O,EAASC,M,EAAS;AAAA;;AACvB,gBAAIC,IAAI,CAAR;AACA,gBAAI,KAAKC,MAAT,EAAiB;AACbD,oBAAIE,SAAS,KAAKD,MAAd,CAAJ;AACH;AACD,iBACKE,QADL,CAEKC,YAFL,CAEmBL,OAAOM,SAF1B,EAGKC,MAHL,GAIKC,IAJL,CAKQ,UAAEC,QAAF,EAAgB;AACZ,uBAAKC,kBAAL,CAAyB,OAAKC,KAAL,CAAWC,GAAX,CAAgB,EAAE,UAAUX,CAAZ,EAAe,YAAYQ,SAASI,KAAT,CAAgB,CAAhB,EAAmBZ,CAAnB,CAA3B,EAAhB,CAAzB,EAAgGF,OAAhG;AACH,aAPT;AAQH;;AAED;;;;;;;;2CAKoBe,Q,EAAUC,G,EAAM;AAChC,gBAAIC,UAAUF,SAASG,KAAT,CAAgB,YAAhB,CAAd;;AAEA,gCAAMD,OAAN,EAAe,UAAEE,KAAF,EAAa;AACxBH,oBAAII,OAAJ,CAAYC,WAAZ,CAAyBF,KAAzB,EAAiCG,KAAjC,CAAwC,UAAEC,KAAF,EAAa;AACjD,0BAAMA,KAAN;AACH,iBAFD;AAGH,aAJD;AAKH;;;;;;kBA9CgB3B,G","file":"Top.js","sourcesContent":["import { each } from 'lodash';\nimport DiscordCommand from './../DiscordCommand';\nimport { Message } from 'discord.js';\n\nexport default class Top extends DiscordCommand {\n\n    /**\n     * Define command\n     * @returns { Top }\n     */\n    boot() {\n        this.name = 'Top';\n        this.syntax = 'top <number of posts> ';\n        this.description = 'lists the top n posts in uktrees, maximum of 10';\n        return this;\n    }\n\n    /**\n     *\n     * @param message { Message }\n     * @param params {{}}\n     */\n    process( message, params ) {\n        let n = 5;\n        if (this.suffix) {\n            n = parseInt(this.suffix);\n        }\n        this\n            .__reddit\n            .getSubreddit( params.subreddit )\n            .getHot()\n            .then(\n                ( response ) => {\n                    this.sendBatchedMessage( this.__dot.top( { 'number': n, 'listings': response.slice( 0, n ) } ), message );\n                } );\n    }\n\n    /**\n     *\n     * @param contents {string}\n     * @param msg {Message}\n     */\n    sendBatchedMessage( contents, msg ) {\n        let batches = contents.match( /.{1,1016}/g );\n\n        each( batches, ( batch ) => {\n            msg.channel.sendMessage( batch ).catch( ( error ) => {\n                throw(error);\n            } );\n        } );\n    }\n}"]}