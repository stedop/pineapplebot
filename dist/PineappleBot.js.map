{"version":3,"sources":["../src/PineappleBot.js"],"names":["bot","userAgent","clientId","clientSecret","refreshToken","subreddit","discordToken","discordServer","commandPrefix","undefined","Error","subbreddit","__reddit","__initRedditClient","__discord","__initDiscordClient","__dot","__initTemplateEngine","discordCommands","boot","__initBotEvents","Client","ws","compress","process","templateSettings","strip","path","on","console","log","user","setGame","catch","error","msg","checkMessagesForCommand","oldMessage","newMessage","isEdit","author","id","content","startsWith","cmdTxt","split","substring","length","suffix","isMentioned","mention","e","channel","sendMessage","cmd","helpCommand","msgTxt","debug","stack","then","message","delete","commands","cmds","filter","contents","helpList","sendBatchedMessage","batches","match","batch","login","respsonse"],"mappings":"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","file":"PineappleBot.js","sourcesContent":["'use strict';\n\nimport { defaults, each, sortBy } from 'lodash';\nimport Snoowrap from 'snoowrap';\nimport Discord from 'discord.js';\nimport Dot from 'dot';\n//import DateFormat from 'dateformat';\nimport Ping from './Discord/Ping';\nimport TopTen from './Discord/TopTen';\n\nexport default class bot {\n\n    /**\n     * @summary initialises the bot\n     *\n     * @param {string} [userAgent] A unique description of what your app does. This argument is not necessary when Snoowrap\n     is running in a browser.\n     * @param {string} [clientId] The client ID of your app (assigned by reddit)\n     * @param {string} [clientSecret] The client secret of your app (assigned by reddit). If you are using a refresh token\n     with an installed app (which does not have a client secret), pass an empty string as your `clientSecret`.\n     * @param {string} [refreshToken] A refresh token for your app.\n     * @param {string} [subreddit] The subreddit name we are going to be managing\n     * @param {string} [discordToken] Key for the stats api\n     * @param {string} [discordServer] The server to work in discord\n     * @param {string} [commandPrefix] The command prefix\n     */\n    constructor( {\n        userAgent,\n        clientId,\n        clientSecret,\n        refreshToken,\n        subreddit,\n        discordToken,\n        discordServer,\n        commandPrefix\n    } = {} ) {\n        if ( clientId === undefined || clientSecret === undefined || refreshToken === undefined ) {\n            throw new Error( 'Reddit Credentials not supplied, fuckwit' );\n        }\n\n        if ( discordToken === undefined ) {\n            throw new Error( 'Discord Token needed, dickhead' );\n        }\n\n        defaults( this, {\n            userAgent,\n            clientId,\n            clientSecret,\n            refreshToken,\n            subreddit,\n            discordToken,\n            discordServer,\n            commandPrefix\n        }, {\n            userAgent: null,\n            clientId: null,\n            clientSecret: null,\n            refreshToken: null,\n            subbreddit: 'uktrees',\n            discordToken: null,\n            discordServer: '#uktrees',\n            commandPrefix: '!'\n        } );\n\n        /**\n         * The reddit client\n         *\n         * @type {Snoowrap}\n         */\n        this.__reddit = this.__initRedditClient();\n\n        /**\n         * The discord client\n         *\n         * @type {Discord.client}\n         */\n        this.__discord = this.__initDiscordClient();\n\n        /**\n         * The template engine\n         *\n         * @type {Dot}\n         * @private\n         */\n        this.__dot = this.__initTemplateEngine();\n\n        /**\n         *\n         * @type {{ping: Command}}\n         */\n        this.discordCommands = {\n            'ping': new Ping(this.__discord, this.__dot, this.__reddit).boot(),\n            'topten': new TopTen(this.__discord, this.__dot, this.__reddit).boot()\n        };\n\n        this.__initBotEvents();\n    }\n\n    /**\n     * Sets up snoowrap\n     *\n     * @returns Snoowrap\n     * @private\n     */\n    __initRedditClient() {\n        return new Snoowrap( {\n            userAgent: this.userAgent,\n            clientId: this.clientId,\n            clientSecret: this.clientSecret,\n            refreshToken: this.refreshToken\n        } );\n\n\n    }\n\n    /**\n     * Sets up discord\n     *\n     * @returns Discord.client\n     * @private\n     */\n    __initDiscordClient() {\n        return new Discord.Client( {\n            ws: {\n                compress: true\n            }\n        } );\n    }\n\n    /**\n     * Sets up the Dot template engine\n     *\n     * @returns Dot\n     * @private\n     * @static\n     */\n    __initTemplateEngine() {\n        return Dot.process( { templateSettings: { strip: false }, path: 'views/' } );\n    }\n\n    /**\n     * Sets up the bot events\n     *\n     * @private\n     */\n    __initBotEvents() {\n        this.__discord.on( 'ready', () => {\n            console.log( 'Logged in!' );\n            console.log( 'type ' + this.commandPrefix + 'help in Discord for a this.discordCommands list.' );\n            this\n                .__discord.user\n                .setGame( this.commandPrefix + 'help' )\n                .catch(\n                    ( error ) => {\n                        throw(error);\n                    } );\n\n        } );\n\n        this.__discord.on( 'message', ( msg ) => {\n            this.checkMessagesForCommand( msg, false );\n        } );\n        this.__discord.on( 'messageUpdate', ( oldMessage, newMessage ) => {\n            this.checkMessagesForCommand( newMessage, true );\n        } );\n    }\n\n    /**\n     *\n     * @param msg\n     * @param isEdit\n     */\n    checkMessagesForCommand( msg, isEdit ) {\n        //check if message is a command\n        if ( msg.author.id !== this.__discord.user.id && msg.content.startsWith( this.commandPrefix ) ) {\n            console.log( 'treating ' + msg.content + ' from ' + msg.author + ' as command' );\n            let cmdTxt = msg.content.split( ' ' )[ 0 ].substring( this.commandPrefix.length );\n            let suffix = msg.content.substring( cmdTxt.length + this.commandPrefix.length + 1 );//add one for the ! and one for the space\n            if ( msg.isMentioned( this.__discord.user ) ) {\n                try {\n                    cmdTxt = msg.content.split( ' ' )[ 1 ];\n                    suffix = msg.content.substring( this.__discord.user.mention().length + cmdTxt.length + this.commandPrefix.length + 1 );\n                } catch ( e ) { //no command\n                    msg.channel.sendMessage( 'Yes?' );\n                    return;\n                }\n            }\n\n            let cmd = this.discordCommands[ cmdTxt ];\n\n            if ( cmdTxt === 'help' ) {\n                //help is special since it iterates over the other this.discordCommands\n                this.helpCommand( suffix, msg );\n            }\n            else if ( cmd ) {\n\n                try {\n                    cmd.process( msg, { subreddit: this.subreddit, suffix: suffix }, isEdit  );\n                } catch ( e ) {\n                    let msgTxt = 'command ' + cmdTxt + ' failed :(';\n                    if ( this.debug ) {\n                        msgTxt += '\\n' + e.stack;\n                    }\n                    msg.channel.sendMessage( msgTxt );\n                    throw(e);\n                }\n\n            } else {\n                msg.channel.sendMessage(\n                    cmdTxt + ' not recognized as a command!' ).then( (message => message.delete( 5000 ))\n                );\n            }\n        } else {\n            //message isn't a command or is from us\n            //drop our own messages to prevent feedback loops\n            if ( msg.author === this.__discord.user ) {\n                return;\n            }\n\n            if ( msg.author !== this.__discord.user && msg.isMentioned( this.__discord.user ) ) {\n                msg.channel.sendMessage( msg.author + ', you called?' );\n            }\n        }\n    }\n\n    /**\n     * Rund the help comand\n     * @param suffix\n     * @param msg Disco\n     */\n    helpCommand( suffix, msg ) {\n        let commands = this.discordCommands;\n        let cmds = {};\n        if ( suffix ) {\n            cmds = suffix.split( ' ' ).filter( function ( cmd ) {\n                return commands[ cmd ];\n            } );\n        } else {\n            cmds = sortBy( commands, [ '' ] );\n        }\n\n        let contents = this.__dot.helpList( { 'commands': cmds } );\n        this.sendBatchedMessage(contents, msg);\n\n    }\n\n    sendBatchedMessage(contents, msg) {\n        let batches = contents.match(/.{1,1016}/g);\n\n        each(batches, (batch) => {\n            msg.author.sendMessage( batch ).catch( ( error ) => {\n                throw(error);\n            } );\n        });\n    }\n\n    go() {\n        this.__discord.login( this.discordToken )\n            .then( ( respsonse ) => {\n                console.log( 'response', respsonse );\n            } )\n            .catch( ( error ) => {\n                throw error;\n            } );\n    }\n}"]}